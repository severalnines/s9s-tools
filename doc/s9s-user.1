.TH S9S-USER 1 "August 29, 2016"

.SH NAME
s9s-user \- Command line client for the Severalnines Clustercontrol server.
.SH SYNOPSIS
.B s9s-user
.RI [OPTION]...
.RI [USERNAME]...
.SH CREATING THE FIRST USER
To use the \fBs9s\fP command line tool a Cmon User Account is needed to
authenticate on the Cmon Controller. These user accounts can be created using
the \fBs9s\fP program itself by either authenticating with a pre-existint user
account or bootstrapping the user management creating the very first user. The
following section describes the authentication and the creation of the first
user in detail.

If there is a username specified either in the command line using the
\fB\-\^\-cmon\-user\fP (or \fB\-u\fP) options or in the configuration file
(either the \fB~/.s9s/s9s.conf\fP or the \fB/etc/s9s.conf\fP file using the
\fBcmon_user\fP variable name) the program will try to authenticate with this
username.  Creating the very first user account is of course not possible this
way. The \fB\-\^\-cmon\-user\fP option and the \fBcmon_user\fP variable is not
for specifying what user we want to create, it is for setting what user we want
to use for the connection.

If no user name is set for the authentication and a user creation is requested
the \fBs9s\fP will try to send a request to the controller through a named pipe.
This is the only way a user account can be created without authenticating with
an existing user account, this is the only way the very first first user can be
created. Here is an example:

.nf
# \fBs9s user --create --group=admins --generate-key --controller=https://192.168.1.127:9556 --new-password="p" --email-address="laszlo@severalnines.com" admin\fR
.fi

Please consider the following:

.TP
.B 1.
There is no \fB\-\^\-cmon\-user\fP specified, this is the first user we
create, we do not have any pre-existing user account. This command line is for
creating the very first user. Please check out the examples section to see how 
to create additional users.

.TP
.B 2.
This is the first run, so we assume no \fB~/.s9s/s9s.conf\fP configuration file
exists, there is no user name there either.

.TP
.B 3.
In the example we create the user with the username "admin". It is the command
line argument of the program.

.TP
.B 4. 
The command specifies the controller to be at \fBhttps://192.168.1.127:9501\fP. 
The HTTPS protocol will be used later, but to create this first user the 
\fBs9s\fP will try to use ssh and sudo to access the controller's named pipe on
the specified host. 

For this to work the UNIX user running this command has to have a passwordless
SSH and sudo set up to the remote host. If the specified host is the localhost
the user do not need SSH access, but still needs to be root or have a
passwordless sudo access because of course the named pipe is not accessible for
anyone.

.TP
.B 5.
Since the UNIX user has no s9s configuration file it will be created. The
controller URL and the user name will be stored in it under
\fB~/.s9s/s9s.conf\fP. 

The next time this user runs the program it will use this "admin" user unless
other user name is set in the command line and will try to connect this
controller unless other controller is set in the command line.

.TP
.B 6.
The password will be set for the user on the controller, but the password will
never be stored in the configuration file. 

.TP 
.B 7.
The \fB\-\^\-generate\-key\fP option is provided, so a new private/public key
pair will be generated, then stored in the \fB~/s9s/\fP directory and the public
key will be registered on the controller for the new user. 

The next time the program run it will find the username in the configuration
file, find the private key in place for the user and will automatically
authenticate without a password. The command line options will always have 
precedence, so this automatic authentication is simply the default way, the
password authentication is always available.

.TP
.B 8.
The group for the new user is set to "admins", so this user will have special
privileges. It is always a good idea to create the very first user with special
priviles, then other users can be created by this administrator account.

.\"
.\" 
.\"
.SH OPTIONS
.SS "Main Option"
The application should always be started using a main option that sets what
operation should be performed. This "main option" should be one of the
following:

.TP 
.B \-\^\-add\-key
Register a new public key for an existing user. After the command the user will
be able to authenticate with the private part of the registered public key, no
password will be necessary.

.B EXAMPLE
.nf
s9s user \\
    --add-key \\
    --public-key-file=/home/pipas/.ssh/id_rsa.pub \\
    --public-key-name=The_SSH_key 
.fi

.TP
.B \-\^\-add\-to\-group
Adds the user to a group. 

.B EXAMPLE
.nf
s9s user \\
    --add-to-group \\
    --group=admins \\
    myuser
.fi

.TP 
.B \-\^\-change\-password
Change the password of an existing user. The password is not a simple property,
so it can not be change using the \fB\-\^\-set\fP option, this special command
line option has to be used.

.B EXAMPLE
.nf
s9s user \\
    --change-password \\
    --new-password=p \\
    pipas
.fi

.TP
.B \-\^\-create
Register a new user (create a new user account) on the controller and grant
access to the ClusterControl system. The user name of the new account should be
the command line argument. 

.B EXAMPLE
.nf
s9s user \\
    --create \\
    --group=testgroup \\
    --create-group \\
    --generate-key \\
    --controller=https://localhost:9556 \\
    --new-password=p \\
    --email-address=laszlo@somewhere.com \\
    --first-name=Laszlo \\
    --last-name=Pere \\
    --batch \\
    pipas
.fi

.TP
.B \-\^\-delete
Delete existing user.

.B EXAMPLE
.nf
s9s user \\
    --delete \\
    theusername
.fi

.TP
.B \-\^\-disable
Disable the user (turn on the "disabled" flag of the user). The users that are 
disabled are not able to log in.

.B EXAMPLE
.nf
s9s user \\
    --cmon-user=system \\
    --password=secret \\
    --disable \\
    nobody
.fi

.TP
.B \-\^\-enable
Enable the user. This will clear the "disabled" flag of the user so that the
user will be able to log in again. The "suspended" flag will also be cleared,
the failed login counter set to 0 and the date&time of the last failed login
gets deleted, so users who are suspended for failed login attempts will also be
able to log in.

.B EXAMPLE
.nf
s9s user \\
    --cmon-user=system \\
    --password=secret \\
    --enable \\
    nobody
.fi

.TP
.B \-\-list\-groups
List the user groups maintained by the ClusterControl controller.

.B EXAMPLE
.nf
s9s user --list-groups
.fi

.TP
.B \-\^\-list\-keys
Lists the public keys registered in the controller for the specified user.
Please note that viewing the public keys require special privileges, ordinary
users can not view the public keys of other users.

.B EXAMPLE
.nf
s9s user \\
    --list-keys
.fi

.TP
.B \-L, \-\^\-list
List the users registered for the ClusterControl controller. 

.TP
.B \-\^\-password\-reset
Resets the password for the user using the "forgot password" email schema. This
option must be used twice to change the password, once without a token to send
an email about the password reset and once with the token received in the email.
Here is an example showing both cases:

.B EXAMPLE
.nf
s9s user \\
    --password-reset \\
    --cmon-user="system"
.fi

.nf 
s9s user \\
    --password-reset \\
    --cmon-user="system" \\
    --token="98197ee4b5584cedba88ef1f583a1258" \\
    --new-password="newpassword"
.fi

.TP
.B \-\^\-set
Changes the specified properties of the user.

.B EXAMPLE
.nf
s9s user \\
    --set \\
    --cmon-user=system \\
    --password=secret \\
    --batch \\
    --email-address=nobody@mydomain.com \\
    nobody 
.fi

.TP
.B \-\^\-remove\-from\-group
Removes the user from a group.

.B EXAMPLE
.nf
s9s user \\
    --remove-from-group \\
    --group=admins \\
    sisko
.fi

.TP
.B \-\^\-set\-group
Sets the primary group for the specified user. The primary group is the first
group the user belongs to. This option will remove the user from this primary
group and add it to the group specified by the \fB\-\^\-group\fP command line
option.

.B EXAMPLE
.nf
s9s user \\
    --set-group \\
    --group=admins \\
    --cmon-user=system \\
    --password=secret \\
    pipas
.fi

.TP
.B \-\^\-stat
Prints detailed information about the specified user(s).

.B EXAMPLE
.nf
s9s user --stat pipas
.fi

.TP
.B \-\^\-whoami
Same as \fB\-\-list\fR, but only lists the current user, the user that
authenticated on the controller.

.B EXAMPLE
.nf
s9s user --whoami
.fi

.TP
.B \-\^\-preferences
To add/set/delete the preferences for a given \fB\-\-cmon\-user\fR. For example the preferences for UI.
Is used with other input option like \fB\-\-preferences\-to\-set\fR or \fB\-\-preferences\-to\-delete\fR options.

.B EXAMPLES
.nf
s9s user --cmon-user=s9s --password=***** --preferences --preferences-to-set="key1=value1;key2=value2;key3=value3"
s9s user --cmon-user=s9s --password=***** --preferences --preferences-to-set="key2=QWERTY"
s9s user --cmon-user=s9s --password=***** --preferences --preferences-to-delete="key1;key2"
.fi

.TP
.B \-\^\-get\-preferences
To get the preferences for a given \fB\-\-cmon\-user\fR.

.B EXAMPLE
.nf
s9s user --cmon-user=s9s --password=***** --get-preferences
.fi

.\"
.\" The generic options that are supported by all the modes.
.\"
.SS Generic Options

.TP
.B \-\^\-help
Print the help message and exist.

.TP
.B \-\^\-debug
Print even the debug level messages.

.TP
.B \-v, \-\^\-verbose
Print more messages than normally.

.TP
.B \-V, \-\^\-version
Print version information and exit.

.TP
.BR \-c " [\fIPROT\fP://]\fIHOSTNAME\fP[:\fIPORT\fP]" "\fR,\fP \-\^\-controller=" [\fIPROT\fP://]\\fIHOSTNAME\fP[:\fIPORT\fP]
The host name of the Cmon Controller. The protocol and port is also accepted as
part of the hostname (e.g. --controller="https://127.0.0.1:9556").

.TP
.BI \-P " PORT" "\fR,\fP \-\^\-controller-port=" PORT
The port where the Cmon Controller is waiting for connections.

.TP
.BI \-u " USERNAME" "\fR,\fP \-\^\-cmon\-user=" USERNAME
Sets the name of the Cmon user (the name of the account maintained by the Cmon
Controller) to be used to authenticate. Since most of the functionality needs
authentication this command line option should be very frequently used or set in
the configuration file. Please check the documentation of the s9s.conf(5) to see
how the Cmon User can be set using the \fBcmon_user\fP configuration variable.

.TP
.BI \-p " PASSWORD" "\fR,\fP \-\^\-password=" PASSWORD
The password for the Cmon User (whose user name is set using the 
\fB\-\^\-cmon\-user\fP command line option or using the \fBcmon_user\fP
configuration value). Providing the password is not mandatory, the user
authentication can also be done using a private/public keypair automatically.

.TP
.BI \-\^\-private\-key\-file= FILE
The path to the private key file that will be used for the authentication. The
default value for the private key is \fB~/.s9s/username.key\fP.

.TP
.B \-l, \-\^\-long
This option is similar to the -l option for the standard ls UNIX utility
program. If the program creates a list of objects this option will change its
format to show more details.

.TP
.B --print-json
The JSON strings will be printed while communicating with the controller. This 
option is for debugging purposes.

.TP
.BR \-\^\-color [ =\fIWHEN\fP "]
Turn on and off the syntax highlighting of the output. The supported values for 
.I WHEN
is
.BR never ", " always ", or " auto .

.TP
.B \-\^\-batch
Print no messages. If the application created a job print only the job ID number
and exit. If the command prints data do not use syntax highlight, headers,
totals, only the pure table to be processed using filters.

.TP
.B \-\^\-no\-header
Do not print headers for tables.

.\"
.\" Options passing various properties of the user.
.\"
.SS Options Related to Users

.TP
.BI \-\^\-group= GROUPNAME
Set the name of the group. For example when a new user is created this option
can be used to control what will be the primary group of the new user. It is
also possible to filter the users by the group name while listing them.

.TP
.BI \-\^\-create\-group
If this command line option is provided and the group for the new user does not
exist the group will be created together with the new user.

.TP
.BI \-\^\-first\-name= NAME
Set the first name of the user.

.TP
.BI \-\^\-last\-name= NAME
Set the last name of the user.

.TP
.BI \-\^\-public\-key\-file= FILENAME 
The name of the file where the public key is stored. Please note that this
currently only works with the \fB\-\^\-add\-key\fP option.

.TP
.BI \-\^\-title= TITLE
The title prefix (e.g. Dr.) for the user.

.TP
.BI \-\^\-email\-address= ADDRESS
The email address for the user.

.TP
.BI \-\^\-new\-password= PASSWORD
The new password when changing the password.

.TP
.BI --old-password= PASSWORD
The old password when changing the password.

Please note that a superuser can change the password for any users without
providing the old password, but if the old password is provided it will be
checked never the less. Should the old password fail the authentication the
request will be rejected and an error message will be printed.

The command line tool is somewhat different from GUI applications, because when
a command is issued an authentication process will be performed (there is no
open session for the command line program as it is for a GUI application). This
means non-superuser requests already have the old password for authentication,
so it is not necessary to repeat it in the command line, but the s9s program
will send it as old password for the controller. Here is an example:

.B EXAMPLE
.nf
# s9s user \\
    --change-password \\
    --cmon-user="myself" \\
    --password="p" \\
    --new-password="pp"
.fi

In this example the \fB\-\-password\fP will be used for authentication and also
sent as "old password" for the password change request. This happens only when
the user changes his/her own password. 

Here is an other example when the \fBsystem\fP user changes the password for
some other user:

.B EXAMPLE
.nf
# s9s user \\
    --change-password \\
    --cmon-user="system" \\
    --password="secret" \\
    --new-password="p" \\
    "otherUser" 
.fi

In this example the \fBsystem\fP user changes the password for the 
\fBotherUser\fP user. The \fBsecret\fP is the password of the \fBsystem\fP user,
the new password is \fBp\fP. The old password is not provided here, but that's
not an issue because as normally, the \fBsystem\fP user is a superuser.


.\"
.\" The user format string.
.\"
.TP
.BI --user-format= FORMATSTRING
The string that controls the format of the printed information about the users.
When this command line option is used the specified information will be printed
instead of the default columns. The format string uses the '%' character to mark
variable fields and flag characters as they are specified in the standard
printf() C library functions. The '%' specifiers are ended by field name letters
to refer to various properties of the users.

The "%+12I" format string for example has the "+12" flag characters in it with
the standard meaning: the field will be 12 character wide and the "+" or "-"
sign will always be printed with the number. 

The properties of the user are encoded by letters. The in the "%16N" for
example the letter "N" encodes the "username" field, so username of the user
will be substituted. 

Standard '\\' notation is also available, \\n for example encodes a new-line 
character.

The s9s-tools support the following fields:

.RS 7
.TP
.B d
The distinguished name of the user. This currently has meaning only for users
originated from an LDAP server.

.TP
.B F
The full name of the user.

.TP
.B f
The first name of the user.

.TP
.B G
The names of groups the given user belongs to.

.TP
.B I
The unique numerical ID of the user.

.TP 
.B j
The job title of the user.

.TP
.B l
The last name of the user.

.TP
.B M
The email address of the user.

.TP
.B m
The middle name of the user.

.TP
.B N
The username for the user.

.TP
.B o
The origin of the user, the place what used to store the original instance of
the user. The possible values are "CmonDb" for users from the Cmon Database or
"LDAP" for users from the LDAP server.

.TP
.B P
The CDT path of the user.

.TP
.B t
The title of the user (e.g. "Dr.").

.RE

.TP
.BI --without-tags= LIST
When listing the users this option can be used to limit the list for those users
that has none of the specified tags set.

.TP
.BI --with-tags= LIST
When listing the users this option can be used to limit the list to those users
that have at least one of the tags set.

.B EXAMPLE
.nf
s9s user \\
    --list \\
    --long \\
    --with-tags="ds9;tng"
.fi


.TP
.BI --preferences-to-set= LIST
List of a given \fB\-\-cmon\-user\fR's preferences to insert/update to/in the cmon database.
Is used with \fB\-\-preferences\fR main option.
The LIST consists of the key=value pairs separated by semicolon (;).
Examples: see the \fB\-\-preferences\fR main option above.

.TP
.BI --preferences-to-delete= LIST
List of a given \fB\-\-cmon\-user\fR's preferences to delete from the cmon database.
Is used with \fB\-\-preferences\fR main option.
The LIST consists of the keys separated by semicolon (;).
Examples: see the \fB\-\-preferences\fR main option above.

.\"
.\"
.\"
.SH USER LIST
Using the \fB\-\-list\fP and \fB\-\-long\fP command line options a detailed list
of the users can be printed. Here is an example of such a list:

.nf
# \fBs9s user --list --long worf jadzia\fP
A ID UNAME  GNAME EMAIL           REALNAME
- 11 jadzia ds9   dax@ds9.com     Lt. Jadzia Dax
A 12 worf   ds9   warrior@ds9.com Lt. Worf
Total: 12

.fi

Please note that there are a total of 12 users defined on the system, but only
two of those are printed because we filtered the list with the command line
arguments.

The list contain the following fields:
.RS 5

.TP
.B A
Shows the authentication status. If this field shows the letter 'A' the user is
authenticated with the current connection.

.TP 
.B ID
Shows the user ID, a unique numerical ID identifying the user.

.TP 
.B UNAME
The username.

.TP
.B GNAME
The name of the primary group of the user. All user belongs to at least one
group, the primary group.

.TP
.B EMAIL
The email address of the user.

.TP
.B REALNAME
The real name of the user that consists first name, last name and some other
parts, printed here as a single string composed all the available components.

.RE

.\"
.\"
.\"
.SH ENVIRONMENT
The s9s application will read and consider a number of environment variables.
Please check s9s(1) for more information.

.\" 
.\" The examples. The are very helpful for people just started to use the
.\" application.
.\" 
.SH EXAMPLES
.PP

This example will create a new user (if it is not yet created), set some
properties for the new user (like the first name and the last name) and grant
acess to the system using a public SSL key that is created. This example is very
similar to the example shown in the "Creating the First User" section, but it
assumes the controller is running on the localhost:

.nf
# \fBs9s user \\
    --create \\
    --generate-key \\
    --new-password="secret" \\
    --first-name="System" \\
    --last-name="Admin" \\
    --group=admins \\
    admin\fR
.fi

Here is an example showing how the next user can be created by this very first
user:

.nf
s9s user \\
    --create \\
    --cmon-user="admin" \\
    --password="secret" \\
    --group="users" \\
    --create-group \\
    --email-address="laszlo@email.com" \\
    --first-name="Some" \\
    --last-name="Guy"   \\
    --new-password="hispassword" \\
    --force-password-update \\
    laszlo
.fi

In this example we specify the existing user that creates the new user by
passing the \fB\-\-cmon-user\fP and \fB\-\-password\fP command line options.
This is usually not necessary, the previous example left the username in the
configuration file and the secret key in the configuration directory.

Please note that we specify the new user's username as a command line argument
(it is "laszlo" in this example), their password with the \fB--new-password\fP,
but we do not request a keypair to be created. The user can generate the key
pair and register it using this password. The user can of course also change
the password, and may be required to do so by the \fB--force-password-update\fP
argument. The latter marks the user's password as expired, so the user may be
asked to change it upon the first login.


Here is how to get a detailed list of the users managed by the controller. The
printed list contains some basic information about the user's:

.nf
# \fBs9s user \\
    --list \\
    --long\fR

A ID UNAME  GNAME  EMAIL                   REALNAME
-  1 system admins -                       System User
-  2 nobody nobody -                       Default User
A  3 admin  admins laszlo@severalnines.com -
Total: 3
.fi

The following example shows how one user can change the email address of an
other (existing) user. 

.nf
# \fBs9s user \\
    --set \\
    --email-address=newemail@ds9.com \\
    worf
\fR
.fi

The following example shows how the system user can add a public key for an
other user. The public key from a local file is uploaded to the controller and
registered for the user.

.nf
# \fBs9s user \\
    --cmon-user=system \\
    --password=secret \\
    --add-key \\
    --public-key-file=/home/otheruser/.s9s/otheruser.pub \\
    --public-key-name="My Public Key" \\
    otheruser
\fR
.fi

The following example shows how the user can check if the authentication with a
public/private key pair is working.

.nf
# \fBs9s user \\
    --whoami \\
    --cmon-user=otheruser \\
    --private-key-file=somefile.key\fR
.fi

The next example shows how the user is able to change the password by providing
both the old and the new passwords.

.nf
# \fBs9s user \\
    --change-password \\
    --cmon-user="myusername" \\
    --password="p" \\
    --new-password="pp" 
\fR
.fi

The \fBsystem\fR user can change the password for other users. Please note the
for the password change the current password of the system user is used.

.nf
# \fBs9s user \\
    --change-password \\
    --cmon-user="system" \\
    --password="secret" \\
    --new-password="p" \\
    "otheruser" \fR
.fi

The following command will change the primary group of the user "pipas" to
"admins". This will effectively make the user a member of the superusers and
grant all the privileges to this user. Please note that the command will be
using the "system" user and password for authenticating on the controller.

.nf 
# \fBs9s user \\
    --set-group \\
    --group=admins \\
    --cmon-user=system \\
    --password=kjh234 \\
    pipas \fR
.fi
