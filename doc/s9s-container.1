.TH S9S-CONATINER 1 "February 20, 2018"

.SH NAME
s9s-container \- Command line client for the Severalnines Clustercontrol server.
.SH SYNOPSIS
.B s9s-container
.RI [OPTION]... 
.RI [CONTAINER]...

.SH DESCRIPTION
This document describes how the \fBs9s\fP program supports virtualization.
Multiple technologies (multiple virtualization backends) are supported (e.g.
Linux LXC and AWS) providing various levels of virtualization. Throughout this
documentation (and in fact in the command line options) \fBs9s\fP uses the word
"\fBcontainer\fP" to identify virtualized servers. The actual virtualization
backend might use the term "virtual machine" or "Linux container" but s9s
provides a high level generic interface to interact with them, so the generic
"container" term is used. So please note, the term "container" does not
necesarily mean "Linux container", it means "a server that is running in some
kind of virtualized environment".

In order to utilize the s9s command line tool and the Cmon Controller to manage
virtualization a container server has to be installed first.  The installation
of such a container server is documented in the s9s-server(1) page. 

.SH OPTIONS
.SS "Main Option"
The application should always be started using a main option that sets what
operation should be performed. This "main option" should be one of the
following:

.TP
.B \-\-create
Create and start a new container or virtual machine. If this option is provided
the controller will create a new job that creates a container. By default the
container will also be started, an account will be created, passwordless sudo
granted and the controller will wait the controller to obtain an IP address.

.B EXAMPLE
.nf
s9s container \\
    --create \\
    --cloud=lxc \\
    --log \\
    node_042
.fi

.TP
.B \-\-delete
Stop and delete the container or virtual machine. This command line option will
initiate a job that will ultimately delete the given container permanently.

.B EXAMPLE
.nf
s9s container \\
    --delete \\
    node_042
.fi

.TP
.B \-L, \-\^\-list
List the containers. Container name(s) can be added to filter containers.
File name pattern characters are also supported in the container names.

.B EXAMPLE
.nf
s9s container \\
    --list \\
    node*
.fi

.TP
.B \-\-start
Starts an existing container. Not all the virtualization backend supports
stopping and starting containers, in these cases the job will simply fail.

.B EXAMPLE
.nf
s9s container \\
    --start \\
    --wait \\
    my_container_6376 
.fi

.TP
.B \-\-stat
Print the details of a container.

.B EXAMPLE
.nf
s9s container \\
    --stat 
.fi

.TP
.B \-\-stop
Stop the container. This will not remove the container by default, but it will
stop it. If the container is set to be deleted on stop (temporary) it will be
deleted.

.B EXAMPLE
.nf
s9s container \\
    --stop \\
    --log \\
    my_container_6376 
.fi

.\"
.\" The generic options that we have in all the modes.
.\"
.SS Generic Options

.TP
.B \-\-help
Print the help message and exist.

.TP
.B \-\-debug
Print even the debug level messages.

.TP
.B \-v, \-\-verbose
Print more messages than normally.

.TP
.B \-V, \-\-version
Print version information and exit.

.TP
.BR \-c " [\fIPROT\fP://]\fIHOSTNAME\fP[:\fIPORT\fP]" "\fR,\fP \-\^\-controller=" [\fIPROT\fP://]\\fIHOSTNAME\fP[:\fIPORT\fP]
The host name of the Cmon Controller. The protocol and port is also accepted as
part of the hostname (e.g. --controller="https://127.0.0.1:9556").


.TP
.BI \-u " USERNAME" "\fR,\fP \-\^\-cmon\-user=" USERNAME
Sets the name of the Cmon user (the name of the account maintained by the Cmon
Controller) to be used to authenticate. Since most of the functionality needs
authentication this command line option should be very frequently used or set in
the configuration file. Please check the documentation of the s9s.conf(5) to see
how the Cmon User can be set using the \fBcmon_user\fP configuration variable.

.TP
.BI \-p " PASSWORD" "\fR,\fP \-\^\-password=" PASSWORD
The password for the Cmon User (whose user name is set using the 
\fB\-\^\-cmon\-user\fP command line option or using the \fBcmon_user\fP
configuration value). Providing the password is not mandatory, the user
authentication can also be done using a private/public keypair automatically.

.TP
.BI \-\^\-private\-key\-file= FILE
The path to the private key file that will be used for the authentication. The
default value for the private key is \fB~/.s9s/username.key\fP.

.TP
.B \-l, \-\-long
This option is similar to the -l option for the standard ls UNIX utility
program. If the program creates a list of objects this option will change its
format to show more details.

.\"
.\" Options Related to Newly Created Jobs
.\"
.SS Options Related to Newly Created Jobs
Commands that create a new job will also accept command line options related to
the job. Please check the cmon-job(1) man page for information about the options
related to newly created jobs.

.\"
.\" Other options. 
.\"
.SS Other Options

.TP
.BI \-\^\-cloud= PROVIDER
This option can be used when new container(s) created. The name of the cloud
provider where the new container will be created. 

This command line option can also be used to filter the list of the containers
when used together with one of the \fB\-\-list\fP or \fB\-\-stat\fP options.

.TP
.BR \-\^\-container\-format =\fIFORMATSTRING\fP 
The string that controls the format of the printed information about the
containers.  When this command line option is used the specified information
will be printed instead of the default columns. The format string uses the '%'
character to mark variable fields and flag characters as they are specified in
the standard printf() C library functions. The '%' specifiers are ended by field
name letters to refer to various properties of the containers.

The "%+12i" format string for example has the "+12" flag characters in it with
the standard meaning: the field will be 12 character wide and the "+" or "-"
sign will always be printed with the number. 

The properties of the container are encoded by letters. The in the "%16D" for
example the letter "D" encodes the "data directory" field, so the full path of
the data directory on the container will be substituted. 

Standard '\\' notation is also available, \\n for example encodes a new-line 
character.

.B EXAMPLE
.nf
s9s container \\
    --list \\
    --long \\
    --container-format="%-15A %-15a %-15r %N\\n"
.fi

The s9s-tools support the following fields:

.RS 7
.TP
.B A
The IP address of the container. This is by default the public IPv4 address of
the container. Containers being deleted/created might not have any IP addresses,
then the "-" string is substituted.

.TP
.B a
The private IP address of the container if there is any or the "-" string.

.TP 
.B C
The full path of the configuration file that stores the container settings if
such a configuration file exists.

.TP
.B c
The cloud (sometimes mentioned as 'provider') of the container, for example
"aws" or "az" as it is set in the credentials file 
\fB/var/lib/cmon/cloud_credentials.json\fP.

.TP
.B F
The name of the first firewall (security group) if the container has such a
property set, the string "-" otherwise.

.TP
.B G
The name of the group owner of the node.

.TP
.B I
The ID of the container.

.TP
.B i
The name of the image that was used to create the container.

.TP
.B N
The name (alias) of the container.

.TP
.B O
The username of the owner of the container.

.TP
.B S
The state of the container as a string.

.TP
.B p
The CDT path of the user.

.TP
.B P
The name of the parent server, the container server that manages the container.

.TP
.B R
The name of the region in which the container is hosted.

.TP
.B r
The address range of the subnet the container belongs to in CIDR notation (e.g. 
"10.0.0.0/24").

.TP
.B T
The type of the container (e.g. "cmon-cloud" or "lxc"). 

.TP
.B t
The name of the template that was used to create a container or the "-" string
if no such a template was used.

.TP
.B U
The ID of the subnet of the container.

.TP
.B V
The ID of the VPC for the container.

.TP
.B z
The class name of the container object.

.TP
.B %
The '%' character itself.

.RE

.TP
.BI \-\^\-containers= LIST
A list of containers to be created or managed. The containers can be passed as
command line options (suitable for simple commands) or as an option argument for
this command line option. The \fBs9s container \-\-stop node01\fP and the 
\fBs9s container \-\-stop \-\-containers=node01\fP commands for example are
equivalent.

The command line option argument is one or more containers separated by the ';'
character. Each container is an URL defining the container name (an alias for
the container) and zero or more properties. The string
\fB"container05?parent_server=core1;container06?parent_server=core2"\fP for
example defines two containers one on one server and the other is on an other
server.

To see what properties are supported in the controller for the containers one
may use the following command:

.nf
# \fBs9s metatype --list-properties --type=CmonContainer --long\fR
ST NAME            UNIT DESCRIPTION
r- acl             -    The access control list.
r- alias           -    The name of the container.
r- architecture    -    The processor architecture.
 . . .
.fi

.TP
.BI \-\^\-credential\-id= ID
The cloud credential ID that should be used when creating a new container. This
is an optional value, if not provided the controller will find the credential to
be used by the cloud name and the chosen region.


.TP
.BI \-\^\-firewalls= LIST
List of firewall (AKA security groups) IDs separated by ',' or ';' to be used
for newly created containers.

This is not a mandatory option, if the virtualization server needs a firewall to
be set one such a firewall will be automatically created. Containers created in
the same job (for example in a create cluster operation) the containers will
share the same firewall, so they will be able to communicate.

If the container is created so that it will be added to an existing cluster
(e.g. in an add node job) the controller will try to find the firewall of the
existing nodes and if it exists will re-use the same ID, so that the nodes can
reach each other.

.TP 
.BI \-\-generate\-key
Create a new SSH keypair when creating new containers. If this command line
option was provided a new SSH keypair will be created and registered for a new
user account to provide SSH access to the new container(s). If the command
creates more than one containers the same one keypair will be registered for
all.

This command line option is actually useful for the cases when a new cluster is
created together with the new containers, please check out the documentation in
the s9s-cluster(1).

.TP
.BI \-\^\-image= NAME
The name of the image from which the new container will be created. This option
is not mandatory, when a new container is created the controller can choose an
image if it is needed. 

To find out what images are supported by the registered container severs please
issue the \fBs9s server \-\^\-list\-images\fP command.

.TP
.BI \-\^\-image\-os\-user= NAME
The name of the initial OS user defined in the image for the first login. Use
this option to create containers based on custom images.

.TP
.BI \-\^\-os\-key\-file= PATH
The path of the SSH key to install on a new container to allow the user to log
in. This command line option can be passed when a new container is created, the
argument of the option should be the path of the \fBprivate\fP key stored on the
controller. Although the path of the private key file is passed only the public
key will be uploaded to the new container.

.TP
.BI \-\^\-os\-password= PASSWORD
This command line option can be passed when creating new containers to set the 
password for the user that will be created on the container. Please note that
some virtualization backend might not support passwords, only keys.

.TP
.BI \-\^\-os\-user= USERNAME
This option may be used when creating new containers to pass the name of the
user that will be created on the new container. Please note that this optin is
not mandatory, because the controller will create an account whose name is the
same as the name of the cmon user creating the container. The public key of the
cmon user will also be registered (if the user has an associated public key) so
the user can actually log in.

.TP
.BI \-\-region= REGION
The name of theregion where the container is created.

.TP
.BI \-\^\-servers= LIST
A list of servers to work with. 

.TP
.BI \-\^\-subnet\-id= ID
This option can be used when new containers are created to set the subnet ID
for the container.

To find out what subnets are supported by the registered container severs please
issue the \fBs9s server \-\^\-list\-subnets\fP command.

.TP
.BI \-\^\-template= NAME 
The name of the container template. Defining a template is an easy way to set a
number of complex propeties without actually enumerating them in the command
line one by one. 

The actual interpretation of the template name is up to the virtualization
backend that is the protocol of the container server. The \fBlxc\fP backend for
example considers the template to be an already created container, it simply
creates the new container by copying the template container so the new container
inherits everything.

The template name can also be provided as a property name for the container, so
the command \fBs9s container \-\-create 
\-\-containers="node02?template=ubuntu;node03" \-\-log\fP for example will
create two containers, one using a template, the other using the default
settings.

Please note that the \fB\-\-template\fP command line option is not mandatory, if
emitted suitable default values will be chosen, but if the template is provided
and the template is not found the creation of the new container will fail.

.TP
.BI \-\^\-volumes= LIST
When a new container is created this command line option can be used to pass a
list of volumes that will be created for the container. 

The list can contain one or more volumes separated by the ';' character. Every
volume consists three properties separated by the ':' character, a volume name,
the volume size in gigabytes and a volume type that is either "hdd" or "ssd".
The string \fB"vol1:5:hdd;vol2:10:hdd"\fP for example defines two hard-disk
columes, one 5GByte and one 10GByte.

For convenience the volume name and the type can be omitted, so that
automatically generated volume names are used.

.TP
.BI \-\^\-vpc\-id= ID
This option can be used when new containers are created to set the vpc ID
for the container.

To find out what VPCs are supported by the registered container severs please
issue the \fBs9s server \-\^\-list\-subnets --long\fP command.


.\"
.\" The description of the node list.
.\"
.SH CONTAINER LIST
Using the \fB\-\-list\fP and \fB\-\-long\fP command line options a detailed list
of the containers can be printed. Here is an example of such a list:

.nf
# \fBs9s container --list --long\fP
S TYPE TEMPLATE OWNER GROUP     NAME                IP ADDRESS    SERVER 
- lxc  -        pipas testgroup bestw_controller    -             core1  
u lxc  -        pipas testgroup dns1                192.168.0.2   core1  
u lxc  ubuntu   pipas testgroup ft_containers_35698 192.168.0.228 core1  
u lxc  -        pipas testgroup mqtt                192.168.0.5   core1  
- lxc  -        pipas testgroup ubuntu              -             core1  
u lxc  -        pipas testgroup www                 192.168.0.19  core1  
Total: 6 containers, 4 running.
.fi

The list contains the following fields:
.RS 5

.TP 
.B S
The abbreviated status information. This is 'u' for a container that is up and
running and '-' otherwise.

.TP
.B TYPE
Shows what kind of container or virtual machine shown in this line, the type of
the software that provides the virtualization.

.TP
.B TEMPLATE
The name of the template that is used to create the container.

.TP
.B OWNER
The owner of the server object.

.TP
.B GROUP
The group owner of the server object.

.TP
.B NAME 
The name of the container. This is not necessarily the hostname, this is a
unique name to identify the container on the host.

.TP
.B IP ADDRESS
The IP address of the container or the '-' character if the container has no IP
address.

.TP
.B SERVER
The server on which the container can be found.

.RE

.\" 
.\" The examples. The are very helpful for people just started to use the
.\" application.
.\" 
.SH EXAMPLES
.PP

Here is an example showing the simplest way to create a container. To create a
container no special information needed, every settings will use the default
values. For this of course at least one container server has to be
pre-registered and properly working.

.nf
# \fBs9s container --create --wait\fR
.fi

Using teh default, automatically chosen container names might not be the easiest
way, so here is an example that provides a container name.

.nf
# \fBs9s container --create --wait node01\fR
.fi

This is equivalent with the following example that provides the container name
through a command line option.

.nf
# \fBs9s container --create --wait --containers="node01"\fR
.fi

